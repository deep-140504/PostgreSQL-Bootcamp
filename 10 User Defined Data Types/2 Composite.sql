----------------------------------------------------------------------------------------------------
-- BASIC SYNTAX
CREATE TYPE type_name AS (
    column1 data_type,
    column2 data_type,
    column3 data_type
);

----------------------------------------------------------------------------------------------------
-- COMPOSITE DATA TYPES
-- COMPOSITE TYPE FOR ADDRESS
CREATE TYPE ADDRESS AS (CITY VARCHAR(50), COUNTR VARCHAR(50));

SELECT
	TYPNAME,
	NSPNAME
FROM
	PG_TYPE
	JOIN PG_NAMESPACE ON PG_TYPE.TYPNAMESPACE = PG_NAMESPACE.OID
WHERE
	TYPNAME = 'ADDRESS';

CREATE TABLE COMPANIES (COMP_ID SERIAL PRIMARY KEY, ADDRESS ADDRESS);

-- HERE THE DATA INSERTION TAKES PLACE USING THE ROW FUNCTION
INSERT INTO
	COMPANIES (ADDRESS)
VALUES
	(ROW ('NYC', 'US'));

SELECT
	*
FROM
	COMPANIES;

-- MODIFYING COMPOSITE TYPE ATTRIBUTE BY CREATING NEW TYPE AND CHANGING THE TYPE OF TABLE COLUMN INTO NEW COMPOSITE DATA TYPE
-- ALL THIS AS POSTGRESQL DOES NOT ALLOW TO MODIFY COMPOSITE TYPE DIRECTLY
CREATE TYPE ADDRESS_NEW AS (
	CITY VARCHAR(50),
	COUNTRY VARCHAR(50) -- CORRECTED NAME
);

ALTER TABLE COMPANIES
ALTER COLUMN ADDRESS TYPE ADDRESS_NEW USING ADDRESS::TEXT::ADDRESS_NEW;

-- ALTERNATIVE SYNTAX
ALTER TABLE employees 
ALTER COLUMN personal_details TYPE person_info_v2 USING personal_details::person_info_v2;


DROP TYPE ADDRESS;

-- SO WHOLE THING COMBINED IN BELOW CODE GOES LIKE, (COMPOSITE_COLUMN).FIELD_NAME
SELECT
	(ADDRESS).COUNTRY
FROM
	COMPANIES;

SELECT
	(ADDRESS).CITY
FROM
	COMPANIES;

-- HERE THE ADDRESS SPECIFES COMPOSITE COLUMN
-- ABOVE BLOCK OF CODE IS USED WHEN DEALING WITH A SINGLE TABLE IMPLEMENTING THE COMPOSITE DATA TYPE
-- WHEN DEALING WITH MULTIPLE TABLES HAVING COMPOSITE DATA TYPE, DO THE FOLLOWING:
-- (TABLENAME.COMPOSITE COLUMN).FIELD
SELECT
	(COMPANIES.ADDRESS).CITY
FROM
	COMPANIES;

----------------------------------------------------------------------------------------------------
-- COMPOSITE TYPE FOR INVENTORY ITEM
CREATE TYPE INVENTORY_ITEM AS (NAME VARCHAR(200), SUPPLIER_ID INT, PRICE NUMERIC);

CREATE TABLE INVENTORY (
	INVENTORY_ID SERIAL PRIMARY KEY,
	ITEM INVENTORY_ITEM
);

SELECT
	*
FROM
	INVENTORY;

-- THE ROW FUNCTION CREATES A ROW OF THE COMPOSITE TYPE
-- IT INSERTS THE SINGLE ROW INTO THE ITEM COLUMN
INSERT INTO
	INVENTORY (ITEM)
VALUES
	(ROW ('PAPER', 20, 20));

SELECT
	(ITEM).NAME
FROM
	INVENTORY
WHERE
	(ITEM).PRICE > 5;