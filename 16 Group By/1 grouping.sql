-- THE GROUP BY CLAUSE DIVIDES THE ROWS RETURNED FROM SELECT STATEMENT INTO GROUPS
-- FOR EACH GROUP YOU CAN APPLY AGGREAGATE FUNCTION
/*
SELECT
COLUMN1
AGGREAGATE_FUNCTION(COLUMN2)
FROM TABLENAME
GROUPBY COLUMN1
*/
-- GROUP BY ELEIMINATES DUPLICATE VALUES FROM THE RESULTS, SAME AS DISTINCT
-- IF YOU WANT TO PRINT SOME COLUMN, WITHOUT APPLYING ANY AGGREGATE FUNCTION ON IT THEN,
-- YOU NEED TO MENTION THE SAME COLUMN INSIDE OF THE GROUP BY BLOCK
SELECT
	MOVIE_LANGUAGE,
	COUNT(*)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE;

SELECT
	*
FROM
	MOVIES;

SELECT
	MOVIE_LANGUAGE,
	AVG(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE
ORDER BY
	MOVIE_LANGUAGE;

SELECT
	AGE_CERTIFICATE,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	AGE_CERTIFICATE
ORDER BY
	AGE_CERTIFICATE;

SELECT
	MOVIE_LANGUAGE,
	MIN(MOVIE_LENGTH),
	MAX(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE
ORDER BY
	1;

SELECT
	MOVIE_LENGTH
FROM
	MOVIES
GROUP BY
	MOVIE_LENGTH
ORDER BY
	1;

----------------------------------------------------------------------------------------------------
-- GROUP BY WITH MULTIPLE COLUMNS
SELECT
	MOVIE_LANGUAGE,
	MIN(MOVIE_LENGTH),
	MAX(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE
ORDER BY
	3 DESC;

SELECT
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE,
	AVG(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE
ORDER BY
	1,
	3 DESC;

SELECT
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE,
	AVG(MOVIE_LENGTH)
FROM
	MOVIES
WHERE
	MOVIE_LENGTH > 100
GROUP BY
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE
ORDER BY
	1,
	2 DESC;

SELECT
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE,
	AVG(MOVIE_LENGTH)
FROM
	MOVIES
WHERE
	MOVIE_LENGTH > 100
GROUP BY
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE,
	MOVIE_LENGTH
ORDER BY
	MOVIE_LENGTH;

SELECT
	AGE_CERTIFICATE,
	AVG(MOVIE_LENGTH)
FROM
	MOVIES
WHERE
	AGE_CERTIFICATE = 'PG'
GROUP BY
	AGE_CERTIFICATE;

SELECT
	*
FROM
	DIRECTORS;

SELECT
	NATIONALITY,
	COUNT(*)
FROM
	DIRECTORS
GROUP BY
	NATIONALITY
ORDER BY
	2 DESC;

-- AGGREAGATE FUNCTIONS ARE NOT ALLOWED IN GROUP BY
SELECT
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE,
	AGE_CERTIFICATE
ORDER BY
	3 DESC;

----------------------------------------------------------------------------------------------------
-- ORDER OF EXECUTION IN GROUP BY
-- POSTGRESQL EXECUTES THE GROUP BY CLAUSE AFTER THE FROM AND WHERE CLAUSES AND
-- BEFORE THE HAVING SELECT, DISTINCT, ORDER BY AND LIMIT CLAUSES
-- ORDER:
-- FROM
-- WHERE => CONDITIONS (Use WHERE when filtering individual rows before aggregation.)
-- GROUP BY => GROUP SETS
-- HAVING => FILTERING DATA (Use HAVING when filtering grouped results after GROUP BY.)
-- SELECT => COLUMNS
-- DISTINCT => UNIQUE COLUMNS
-- ORDER BY => FILTER RECORDS
-- LIMIT => FILTER RECORDS
----------------------------------------------------------------------------------------------------
-- USING HAVING
SELECT
	MOVIE_LANGUAGE,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE
HAVING
	SUM(MOVIE_LENGTH) > 200
ORDER BY
	2;

SELECT
	DIRECTOR_ID,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	DIRECTOR_ID
HAVING
	SUM(MOVIE_LENGTH) > 200
ORDER BY
	1;

-- CAN NOT USE COLUMN ALIASES IN THE HAVING CLAUSE, AS HAVING CLAUSE IS EVALUATED BEFORE SELECT
----------------------------------------------------------------------------------------------------
-- HAVING WORK ON RESULT GROUP
-- WHERE WORKS ON SELECT COLUMNS AND NOT ON RESULT GROUP
-- USING HAVING::
SELECT
	MOVIE_LANGUAGE,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
GROUP BY
	MOVIE_LANGUAGE
HAVING
	SUM(MOVIE_LENGTH) > 200
ORDER BY
	2;

-- USING WHERE::
-- THIS GIVES ERROR
SELECT
	MOVIE_LANGUAGE,
	SUM(MOVIE_LENGTH)
FROM
	MOVIES
WHERE
	SUM(MOVIE_LENGTH) > 200
GROUP BY
	MOVIE_LANGUAGE
ORDER BY
	2 DESC;

----------------------------------------------------------------------------------------------------
-- HANDLING NULL VALUES WITH GROUP BY
CREATE TABLE EMPLOYEES_TEST (
	EMPLOYEE_ID SERIAL PRIMARY KEY,
	EMPLOYEE_NAME VARCHAR(100),
	DEPARTMENT VARCHAR(100),
	SALARY INT
);

SELECT
	*
FROM
	EMPLOYEES_TEST;

INSERT INTO
	EMPLOYEES_TEST (EMPLOYEE_NAME, DEPARTMENT, SALARY)
VALUES
	('A', 'FINANCE', 2500),
	('B', NULL, 3000),
	('C', NULL, 4000),
	('D', 'FINANCE', 4000),
	('E', 'IT', 5000),
	('F', 'IT', 4000);

DELETE FROM EMPLOYEES_TEST
WHERE
	EMPLOYEE_NAME = 'A';

SELECT
	*
FROM
	EMPLOYEES_TEST
ORDER BY
	DEPARTMENT;

SELECT
	DEPARTMENT,
	COUNT(*)
FROM
	EMPLOYEES_TEST
GROUP BY
	DEPARTMENT;

-- HANDLING NULL VALUES USING 'COALESCE'
SELECT
	COALESCE (DEPARTMENT, 'NO DEPARTMENT') DEPARTMENT,
	COUNT(*) TOTAL_EMPLOYEES
FROM
	EMPLOYEES_TEST
GROUP BY
	DEPARTMENT
ORDER BY
	DEPARTMENT;