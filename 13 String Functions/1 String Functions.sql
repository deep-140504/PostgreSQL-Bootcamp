----------------------------------------------------------------------------------------------------
-- UPPER, LOWER AND INITCAP
SELECT
	UPPER('abc def');

SELECT
	UPPER(FIRST_NAME) AS FIRST_NAME,
	UPPER(LAST_NAME) AS LAST_NAME
FROM
	DIRECTORS;

SELECT
	*
FROM
	DIRECTORS;

SELECT
	LOWER('ABC DEF');

SELECT
	INITCAP('ABC DEF GHI JKL MNO');

SELECT
	INITCAP(CONCAT(FIRST_NAME, ' ', LAST_NAME)) AS FULL_NAME
FROM
	DIRECTORS;

----------------------------------------------------------------------------------------------------
-- LEFT AND RIGHT
SELECT
	LEFT(STRING, N);

-- THIS RETURNS ALL CHARACTERS EXCEPT LAST N CHARACTERS
SELECT
	LEFT('ABCDE', -2);

-- THIS RETURNS FIRST N CHARACTERS IN THE STRING 
SELECT
	LEFT('ABCDE', 2);

SELECT
	LEFT('ABCDE', 10);

-- HERE 1 REFERENCES TO THE FIRST COLUMN, WHICH IS THE INITAL IN THIS CAN
-- IN ORDER BY YOU CAN EXPLICITLY MENTION THE ALIASES NAME AS WELL
SELECT
	LEFT(FIRST_NAME, 1) AS INITAL
FROM
	DIRECTORS
ORDER BY
	1;

-- THIS COUNTS FOR THE OCCURENCES OF EVERY INITIALS
-- GROUP BY ENSURES EACH GROUP CONSISTS OF NAMES WITH THE SAME FIRST LETTER
-- GROUP BY LEFT(FIRST_NAME, 1) ensures each unique first letter gets its own group.
-- COUNT(*) COUNTS THE NUMBER OF ROWS IN EACH GROUP
SELECT
	LEFT(FIRST_NAME, 1) AS INTIAL,
	COUNT(*) AS TOTAL_INITALS -- COUNTS OCCURENECES OF EACH INITIAL
FROM
	DIRECTORS
GROUP BY
	1 ORDER BY1;

-- GET FIRST  CHARACTERS FROM ALL MOVIES
SELECT
	MOVIE_NAME,
	LEFT(MOVIE_NAME, 6)
FROM
	MOVIES;

-- RIGHT(STRING, N) THIS FUNCTION RETURNS LAST N CHARACTERS IN THE STRING
SELECT
	RIGHT('ABCDE', 2);

-- RIGHT(STRING, N) RETURNS ALL CHARACTER EXCEPT FIRST N CHARACTERS
SELECT
	RIGHT('ABCDE', -2);

SELECT
	LAST_NAME,
	RIGHT(LAST_NAME, 2)
FROM
	DIRECTORS
WHERE
	RIGHT(LAST_NAME, 2) = 'on';

SELECT
	LAST_NAME
FROM
	DIRECTORS
WHERE
	RIGHT(LAST_NAME, 2) = 'on';

----------------------------------------------------------------------------------------------------
-- REVERSE
SELECT
	REVERSE('ABC DEF');

SELECT
	REVERSE('FED CBA');

----------------------------------------------------------------------------------------------------
-- SPLIT_PART
SPLIT_PART(STRING, DELIMITER, POSITION)
-- BELOW BOTH ARE SAME
SELECT
	SPLIT_PART('1, 2, 3', ',', 2);

SELECT
	SPLIT_PART('1,2,3', ',', 2);

SELECT
	SPLIT_PART('A, B, C, D', ',', 3);

-- GET THE RELEASE YEAR OF ALL THE MOVIES
SELECT
	MOVIE_NAME,
	RELEASE_DATE,
	SPLIT_PART(TO_CHAR(RELEASE_DATE, 'YYYY-MM-DD'), '-', 1)
	-- SPLIT_PART(RELEASE_DATE, '-', 1) AS RELEASE_YEAR,
	-- THIS DOES NOT WORK AS IT REQUIRES TO CONVER THE DATE INTO THE CHARACTER FROM 'YYYY-MM-DD' FORMAT
FROM
	MOVIES;

-- THIS IS SIMILAR TO ABOVE MENTIONED CODE
SELECT
	MOVIE_NAME,
	RELEASE_DATE,
	EXTRACT(
		YEAR
		FROM
			RELEASE_DATE
	) AS RELEASE_YEAR
FROM
	MOVIES;

----------------------------------------------------------------------------------------------------
-- TRIM, BTRIM, LTRIM and RTRIM
TRIM(
	[LEADING | TRAILING | BOTH] [CHARACTERS]
	FROM
		STRING
);

TRIM(
	LEADING
	FROM
		STRING
);

-- REMOVES SPACES FROM THE LEFT HAND SIDE
TRIM(
	TRAILING
	FROM
		STRING
);

-- REMOVES SPACES FROM THE RIGHT HAND SIDE
TRIM(
	BOTH
	FROM
		STRING
);

-- REMOVES SPACES FROM BOTH SIDES
LTRIM(STRING, [CHARACTER]);

RTRIM(STRING, [CHARACTER]);

BTRIM(STRING, [CHARACTER]);

SELECT
	TRIM(
		LEADING
		FROM
			('     ABC     DEF     ')
	),
	TRIM(
		TRAILING
		FROM
			('     ABC     DEF     ')
	),
	TRIM('     ABC     DEF     ');

--TRIM AND BTRIM ARE SAME
SELECT
	TRIM(
		LEADING '0'
		FROM
			CAST(00000012345 AS TEXT)
	);

SELECT
	LTRIM('YUMMY', 'Y');

SELECT
	RTRIM('YUMMY', 'Y');

SELECT
	TRIM('YUMMY', 'Y');

SELECT
	BTRIM('YUMMY', 'Y');

----------------------------------------------------------------------------------------------------
-- LPAD AND RPAD
-- LPAD PADS A SRTING ON THE LEFT TO A SPECIFIED LENGTH WITH A SEQUENCE OF CHARCTERS
-- RPAD PADS A SRTING ON THE RIGHT TO A SPECIFIED LENGTH WITH A SEQUENCE OF CHARCTERS
-- BY DEFAULT PADDING VALUE IS ' ', U CAN SPECIFY EXPLICITLY AS WELL
-- PADDING FUNCTION PADS THE MAX(LEN(STRING) - PADDING, 0) NUMBERS OF FILLERS TO RIGHT OR LEFT OF STRING
SELECT
	LPAD('DATABASE', 14, '*');

SELECT
	RPAD('DATABASE', 14, '*');

SELECT
	LPAD('DATABASE', 14);

SELECT
	RPAD('DATABASE', 14);

SELECT
	LPAD('*', 0, '*');

-- BELOW CODES WILL GIVE THE CHART BASED ON THE REVENUE GENERATED 1 START = 10X REVENUE
SELECT
	MV.MOVIE_NAME,
	R.REVENUES_DOMESTIC,
	LPAD(
		'*',
		CAST(TRUNC(R.REVENUES_DOMESTIC / 10) AS INT), -- TRUNC FUNCTION CONVERTS FLOAT TO INTEGER
		'*'
	) CHART
FROM
	MOVIES MV
	INNER JOIN MOVIES_REVENUES R ON R.MOVIE_ID = MV.MOVIE_ID
ORDER BY
	3 DESC NULLS LAST;

SELECT
	LPAD('*', 0, '*');

-- THIS IS TO UNDERSTAND FOR THE CASE WHERE MOVIE_REVENUE IS 2.40 AND NO * S GIVEN AS O/P
SELECT
	MV.MOVIE_NAME,
	R.REVENUES_DOMESTIC,
	LPAD(
		'*',
		CAST(TRUNC(R.REVENUES_DOMESTIC / 10) AS INT),
		'*'
	) CHART
FROM
	MOVIES MV
	INNER JOIN MOVIES_REVENUES R ON R.MOVIE_ID = MV.MOVIE_ID
ORDER BY
	3 DESC NULLS LAST,
	2 DESC NULLS LAST;

-- 3, 2 DESC NULLS LAST,THIS WILL NOT YIELD REQUIRED RESULT AS 3 IS IN ASCENDING AND 2 IS IN DESCINGING
-- HERE I WANTED TO GET THE O/P IN FORMAT WHERE REVENUES AND CHART BOTH ARE SORTED
----------------------------------------------------------------------------------------------------
-- LENGTH FUNCTION
SELECT
	LENGTH('Amazing PostgreSQL');

SELECT
	LENGTH(CAST(1000123 AS TEXT));

SELECT
	CHAR_LENGTH('');

SELECT
	CHAR_LENGTH(' ');

SELECT
	CHAR_LENGTH(NULL);

SELECT
	CONCAT(FIRST_NAME, ' ', LAST_NAME) AS "Full Name",
	LENGTH(FIRST_NAME || ' ' || LAST_NAME) AS "Length"
FROM
	DIRECTORS
ORDER BY
	2 DESC;

----------------------------------------------------------------------------------------------------
-- POSITION
SELECT
	POSITION('A' IN 'ClickAnalytics');

----------------------------------------------------------------------------------------------------
--  STRPOS
SELECT
	STRPOS('WORLD BANK', 'BANK');

SELECT
	FIRST_NAME,
	LAST_NAME
FROM
	DIRECTORS
WHERE
	STRPOS(LAST_NAME, 'on') > 0;

----------------------------------------------------------------------------------------------------
-- SUBSTRING
SUBSTRING(
	STRING
	FROM
		START_POSITION FOR LENGTH
);

SUBSTRING(STRING, START_POSITION, LENGTH) SUBSTRING(
	STRING
	FROM
		PATTERN
)
SELECT
	SUBSTRING(
		'What a wonderful world'
		FROM
			1 FOR 4
	);

SELECT
	SUBSTRING(
		'What a wonderful world'
		FROM
			8 FOR 10
	);

SELECT
	SUBSTRING('What a wonderful world' FOR 7);

SELECT
	FIRST_NAME,
	LAST_NAME,
	SUBSTRING(FIRST_NAME, 1, 1) AS INITIAL
FROM
	DIRECTORS
ORDER BY
	LAST_NAME;

----------------------------------------------------------------------------------------------------
-- REPEAT
SELECT
	REPEAT(' ', 10);

SELECT
	REPEAT('A', 4);

----------------------------------------------------------------------------------------------------
-- REPLACE
SELECT
	REPLACE(STRING, FROM_SUBSTRING, TO_SUBSTRING)
SELECT
	REPLACE(
		'What a wonderful world',
		'a wonderful',
		'an amazing'
	);